class Category {
  final String id;
  final String name;
  final String? description;
  final String? icon;
  final bool isActive;

  Category({
    required this.id,
    required this.name,
    this.description,
    this.icon,
    this.isActive = true,
  });

  factory Category.fromJson(Map<String, dynamic> json) {
    return Category(
      id: json['id'],
      name: json['name'],
      description: json['description'],
      icon: json['icon'],
      isActive: json['isActive'] ?? true,
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'name': name,
      'description': description,
      'icon': icon,
      'isActive': isActive,
    };
  }
}

// –ü—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ñ–µ—Ä–º–µ—Ä—Å–∫–æ–≥–æ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞
class FarmCategories {
  static final List<Category> categories = [
    Category(
      id: 'vegetables',
      name: '–û–≤–æ—â–∏',
      description: '–°–≤–µ–∂–∏–µ –æ–≤–æ—â–∏ —Å —Ñ–µ—Ä–º—ã',
      icon: 'ü•ï',
    ),
    Category(
      id: 'fruits',
      name: '–§—Ä—É–∫—Ç—ã',
      description: '–°–æ—á–Ω—ã–µ —Ñ—Ä—É–∫—Ç—ã',
      icon: 'üçé',
    ),
    Category(
      id: 'dairy',
      name: '–ú–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã',
      description: '–ú–æ–ª–æ–∫–æ, —Å—ã—Ä, —Ç–≤–æ—Ä–æ–≥',
      icon: 'ü•õ',
    ),
    Category(
      id: 'meat',
      name: '–ú—è—Å–æ –∏ –ø—Ç–∏—Ü–∞',
      description: '–°–≤–µ–∂–µ–µ –º—è—Å–æ',
      icon: 'ü•©',
    ),
    Category(
      id: 'eggs',
      name: '–Ø–π—Ü–∞',
      description: '–î–æ–º–∞—à–Ω–∏–µ —è–π—Ü–∞',
      icon: 'ü•ö',
    ),
    Category(
      id: 'honey',
      name: '–ú–µ–¥ –∏ –ø—Ä–æ–¥—É–∫—Ç—ã –ø—á–µ–ª–æ–≤–æ–¥—Å—Ç–≤–∞',
      description: '–ù–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π –º–µ–¥',
      icon: 'üçØ',
    ),
    Category(
      id: 'grains',
      name: '–ó–µ—Ä–Ω–æ–≤—ã–µ',
      description: '–ö—Ä—É–ø—ã –∏ –º—É–∫–∞',
      icon: 'üåæ',
    ),
    Category(
      id: 'herbs',
      name: '–ó–µ–ª–µ–Ω—å –∏ —Å–ø–µ—Ü–∏–∏',
      description: '–°–≤–µ–∂–∞—è –∑–µ–ª–µ–Ω—å',
      icon: 'üåø',
    ),
  ];
}
